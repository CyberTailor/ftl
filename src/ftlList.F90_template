! Lists are sequence containers that allow constant time insert and erase operations anywhere within the sequence, and
! iteration in both directions.
!
! List containers are implemented as doubly-linked lists; Doubly linked lists can store each of the elements they contain
! in different and unrelated storage locations. The ordering is kept internally by the association to each element of a
! link to the element preceding it and a link to the element following it.
!
! They are very similar to forward_list: The main difference being that forward_list objects are single-linked lists, and
! thus they can only be iterated forwards, in exchange for being somewhat smaller and more efficient.
!
! Compared to other base standard sequence containers (array, vector and deque), lists perform generally better in
! Cinserting, extracting and moving elements in any position within the container for which an iterator has already been
! Cobtained, and therefore also in algorithms that make intensive use of these, like sorting algorithms.
!
! The main drawback of lists and forward_lists compared to these other sequence containers is that they lack direct access
! to the elements by their position; For example, to access the sixth element in a list, one has to iterate from a known
! position (like the beginning or the end) to that position, which takes linear time in the distance between these. They
! also consume some extra memory to keep the linking information associated to each element (which may be an important
! factor for large lists of small-sized elements).

#define FTL_CONTAINER ftlList
#define FTL_CONTAINER_PROVIDES_BIDIRECTIONAL_ITERATOR

#ifdef FTL_INSTANTIATE_TEMPLATE

#if !defined(FTL_TEMPLATE_TYPE)
#error FTL_TEMPLATE_TYPE must be defined when instantiating ftlList
#endif
#if !defined(FTL_TEMPLATE_TYPE_NAME)
#error FTL_TEMPLATE_TYPE_NAME must be defined when instantiating ftlList
#endif

#include "ftlMacros.inc"


module CAT3(ftlList,FTL_TEMPLATE_TYPE_NAME,Module)

#ifdef FTL_TEMPLATE_TYPE_MODULE
   use FTL_TEMPLATE_TYPE_MODULE
#endif

   implicit none
   private


! ====== Type of the ftlList container itself ====================================================================================

   type :: ListNode
      class(ListNode), pointer :: prev => null()
      class(ListNode), pointer :: next => null()
   end type

   type, extends(ListNode) :: DataNode
      FTL_TEMPLATE_TYPE :: data
   end type


   type, public :: CAT(ftlList,FTL_TEMPLATE_TYPE_NAME)
      private

      integer                            :: psize = 0
      type(ListNode)                     :: sentinel
      FTL_TEMPLATE_TYPE, pointer, public :: front => null()
      FTL_TEMPLATE_TYPE, pointer, public :: back => null()

   contains
      private

      procedure         :: NewDefault
      procedure         :: NewCopyOther
      procedure         :: NewFill
      procedure         :: NewFromArray
      procedure         :: NewFromIteratorPair
      generic  , public :: New => NewDefault, NewCopyOther, NewFill, NewFromArray, NewFromIteratorPair

      procedure, public :: Delete
#ifndef FTL_NO_FINALIZERS
      final             :: Finalizer
#endif

      procedure         :: BeginList
      generic  , public :: Begin => BeginList
      procedure         :: EndList
      generic  , public :: End => EndList

      procedure         :: SizeList
      generic  , public :: Size => SizeList

      procedure, public :: Empty

      procedure         :: AssignOther
      procedure         :: AssignIteratorPair
      procedure         :: AssignFill
      procedure         :: AssignArray
      generic  , public :: Assign => AssignOther, AssignIteratorPair, AssignFill, AssignArray

      procedure         :: InsertSingle
      procedure         :: InsertFill
      procedure         :: InsertArray
      procedure         :: InsertIteratorPair
      generic  , public :: Insert => InsertSingle, InsertFill, InsertArray, InsertIteratorPair

      procedure         :: EraseSingle
      procedure         :: EraseIteratorPair
      generic  , public :: Erase => EraseSingle, EraseIteratorPair

      procedure, public :: PushFront
      procedure, public :: PopFront
      procedure, public :: PushBack
      procedure, public :: PopBack

      procedure, public :: Swap

      procedure, public :: Resize

      procedure, public :: Clear

      procedure         :: FixValuePtrs

   end type

   public :: Begin
   interface Begin
      module procedure BeginList
   end interface

   public :: End
   interface End
      module procedure EndList
   end interface

   public :: Size
   interface Size
      module procedure SizeList
   end interface

   public :: assignment(=)
   interface assignment(=)
      module procedure AssignArray, AssignOther
   end interface

   public :: Swap
   interface Swap
      module procedure Swap
   end interface


! ====== Type of an iterator over a ftlList container ============================================================================

   type, public :: CAT3(ftlList,FTL_TEMPLATE_TYPE_NAME,Iterator)
      private

      class(ListNode)  , pointer         :: node => null()
      FTL_TEMPLATE_TYPE, pointer, public :: value => null()

   contains
      private

      procedure         :: NewItDefault
      procedure         :: NewItCopyOther
      generic  , public :: New => NewItDefault, NewItCopyOther

      procedure, public :: Inc
      procedure, public :: Dec

   end type

   public :: operator(==)
   interface operator(==)
      module procedure EqualOther
   end interface

   public :: operator(/=)
   interface operator(/=)
      module procedure UnequalOther
   end interface


contains



! ====== Implementation of ftlList methods =======================================================================================


   ! Constructs a list container object, initializing its contents depending on the constructor version used:
   !
   subroutine NewDefault(self)
      class(CAT(ftlList,FTL_TEMPLATE_TYPE_NAME)), intent(inout), target :: self

      ! Constructs an empty list, with no elements.

      call self%Delete()

      self%sentinel%next => self%sentinel
      self%sentinel%prev => self%sentinel

   end subroutine
   !
   subroutine NewCopyOther(self, other)
      class(CAT(ftlList,FTL_TEMPLATE_TYPE_NAME)), intent(inout) :: self
      class(CAT(ftlList,FTL_TEMPLATE_TYPE_NAME)), intent(in)    :: other

      type(CAT3(ftlList,FTL_TEMPLATE_TYPE_NAME,Iterator)) :: it

      ! Constructs a list as a copy of another list.

      call self%New()

      it = other%Begin()
      do while (it /= other%End())
         call self%PushBack(it%value)
         call it%Inc()
      enddo

   end subroutine
   !
   subroutine NewFill(self, n, val)
      class(CAT(ftlList,FTL_TEMPLATE_TYPE_NAME)), intent(inout)        :: self
      integer                                   , intent(in)           :: n
      FTL_TEMPLATE_TYPE                         , intent(in), optional :: val

      ! Constructs a container with n elements. Each element is a copy of val (if present).

      integer :: i

      call self%New()

      do i = 1, n
         call self%PushBack(val)
      enddo

   end subroutine
   !
   subroutine NewFromArray(self, array)
      class(CAT(ftlList,FTL_TEMPLATE_TYPE_NAME)), intent(inout) :: self
      FTL_TEMPLATE_TYPE                         , intent(in)    :: array(:)

      ! Constructs a container with a copy of each of the elements in array, in the same order.

      integer :: i

      call self%New()

      do i = 1, size(array)
         call self%PushBack(array(i))
      enddo

   end subroutine
   !
   subroutine NewFromIteratorPair(self, first, last)
      class(CAT(ftlList,FTL_TEMPLATE_TYPE_NAME))         , intent(inout) :: self
      type(CAT3(ftlList,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in)    :: first
      type(CAT3(ftlList,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in)    :: last

      type(CAT3(ftlList,FTL_TEMPLATE_TYPE_NAME,Iterator)) :: it

      call self%New()
      it = self%Begin()
      call self%Insert(it, first, last) ! Fortran, why can't I pass l%Begin() directly?

   end subroutine





   subroutine Delete(self)
      class(CAT(ftlList,FTL_TEMPLATE_TYPE_NAME)), intent(inout), target :: self

      class(ListNode), pointer :: walker, deletor

      walker => self%sentinel%next
      do while (associated(walker) .and. .not.associated(walker,self%sentinel))
         deletor => walker
         walker => walker%next
         deallocate(deletor)
      enddo

      self%psize = 0
      nullify(self%sentinel%prev)
      nullify(self%sentinel%next)
      nullify(self%front)
      nullify(self%back)

   end subroutine

#ifndef FTL_NO_FINALIZERS
   subroutine Finalizer(self)
      type(CAT(ftlList,FTL_TEMPLATE_TYPE_NAME)), intent(inout) :: self
      call self%Delete()
   end subroutine
#endif



   ! =============> Iterators:



   ! Returns an iterator pointing to the first element in the list container.
   !
   ! Notice that, unlike member list%front, which returns a reference to the first element, this function returns a bidirectional
   ! iterator pointing to it.
   !
   ! If the container is empty, the returned iterator value shall not be dereferenced.
   !
   type(CAT3(ftlList,FTL_TEMPLATE_TYPE_NAME,Iterator)) function BeginList(self) result(Begin)
      class(CAT(ftlList,FTL_TEMPLATE_TYPE_NAME)), intent(in), target :: self

      Begin%node => self%sentinel%next
      select type (node => Begin%node)
      type is (DataNode)
         Begin%value => node%data
      end select

   end function



   ! Returns an iterator referring to the past-the-end element in the list container.
   !
   ! The past-the-end element is the theoretical element that would follow the last element in the list container. It does
   ! not point to any element, and thus shall not be dereferenced.
   !
   ! Because the ranges used by functions of the standard library do not include the element pointed by their closing
   ! iterator, this function is often used in combination with list%begin to specify a range including all the elements in
   ! the container.
   !
   ! If the container is empty, this function returns the same as list%begin.
   !
   type(CAT3(ftlList,FTL_TEMPLATE_TYPE_NAME,Iterator)) function EndList(self) result(End)
      class(CAT(ftlList,FTL_TEMPLATE_TYPE_NAME)), intent(in), target :: self

      End%node => self%sentinel

   end function



   ! =============> Capacity:



   ! Returns the number of elements in the list.
   !
   pure integer function SizeList(self) result(Size)
      class(CAT(ftlList,FTL_TEMPLATE_TYPE_NAME)), intent(in) :: self

      Size = self%psize

   end function


   ! Returns whether the list is empty (i.e. whether its size is 0).
   !
   ! This function does not modify the container in any way. To clear the content of a list, see ftlList%clear.
   !
   pure logical function Empty(self)
      class(CAT(ftlList,FTL_TEMPLATE_TYPE_NAME)), intent(in) :: self

      Empty = (self%psize == 0)

   end function



   ! =============> Modifiers:



   ! Assigns new contents to the list container, replacing its current contents, and modifying its size accordingly.
   !
   subroutine AssignOther(self, other)
      class(CAT(ftlList,FTL_TEMPLATE_TYPE_NAME)), intent(inout) :: self
      class(CAT(ftlList,FTL_TEMPLATE_TYPE_NAME)), intent(in)    :: other

      call self%New(other)

   end subroutine
   !
   subroutine AssignFill(self, n, val)
      class(CAT(ftlList,FTL_TEMPLATE_TYPE_NAME)), intent(inout) :: self
      integer                                   , intent(in)    :: n
      FTL_TEMPLATE_TYPE                         , intent(in)    :: val

      call self%New(n, val)

   end subroutine
   !
   subroutine AssignIteratorPair(self, first, last)
      class(CAT(ftlList,FTL_TEMPLATE_TYPE_NAME))         , intent(inout) :: self
      type(CAT3(ftlList,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in)    :: first
      type(CAT3(ftlList,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in)    :: last

      call self%New(first, last)

   end subroutine
   !
   subroutine AssignArray(self, array)
      class(CAT(ftlList,FTL_TEMPLATE_TYPE_NAME)), intent(inout) :: self
      FTL_TEMPLATE_TYPE                         , intent(in)    :: array(:)

      call self%New(array)

   end subroutine



   ! The container is extended by inserting new elements before the element at the specified position.
   !
   ! This effectively increases the list size by the amount of elements inserted.
   !
   ! Unlike other standard sequence containers, list and forward_list objects are specifically designed to be efficient
   ! inserting and removing elements in any position, even in the middle of the sequence.
   !
   ! The arguments determine how many elements are inserted and to which values they are initialized.
   !
   subroutine InsertSingle(self, position, val)
      class(CAT(ftlList,FTL_TEMPLATE_TYPE_NAME))         , intent(inout) :: self
      type(CAT3(ftlList,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(inout) :: position
      FTL_TEMPLATE_TYPE                                  , intent(in)    :: val

      call self%InsertArray(position, [val])

   end subroutine
   !
   subroutine InsertFill(self, position, n, val)
      class(CAT(ftlList,FTL_TEMPLATE_TYPE_NAME))         , intent(inout) :: self
      type(CAT3(ftlList,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(inout) :: position
      integer                                            , intent(in)    :: n
      FTL_TEMPLATE_TYPE                                  , intent(in)    :: val

      integer :: i

      if (n == 0) return
      call self%InsertArray(position, [(val, i=1,n)])

   end subroutine
   !
   subroutine InsertArray(self, position, array)
      class(CAT(ftlList,FTL_TEMPLATE_TYPE_NAME))         , intent(inout) :: self
      type(CAT3(ftlList,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(inout) :: position
      FTL_TEMPLATE_TYPE                                  , intent(in)    :: array(:)

      integer :: i

      do i = 1, size(array)
         call InsertNodeBefore(position%node, array(i))
      enddo
      self%psize = self%psize + size(array)
      call self%FixValuePtrs()

   end subroutine
   !
   subroutine InsertIteratorPair(self, position, first, last)
      class(CAT(ftlList,FTL_TEMPLATE_TYPE_NAME))         , intent(inout) :: self
      type(CAT3(ftlList,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(inout) :: position
      type(CAT3(ftlList,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in)    :: first
      type(CAT3(ftlList,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in)    :: last

      type(CAT3(ftlList,FTL_TEMPLATE_TYPE_NAME,Iterator)) :: it

      it = first
      do while (it /= last)
         call InsertNodeBefore(position%node, it%value)
         self%psize = self%psize + 1
         call it%Inc()
      enddo
      call self%FixValuePtrs()

   end subroutine




   ! Inserts a new element at the beginning of the list, right before its current first element. The content of val is copied
   ! (or moved) to the inserted element.
   !
   ! This effectively increases the container size by one.
   !
   subroutine PushFront(self, val)
      class(CAT(ftlList,FTL_TEMPLATE_TYPE_NAME)), intent(inout), target :: self
      FTL_TEMPLATE_TYPE                         , intent(in)            :: val

      call InsertNodeBefore(self%sentinel%next, val)
      self%psize = self%psize + 1
      call self%FixValuePtrs()

   end subroutine



   ! Removes the first element in the list container, effectively reducing its size by one.
   !
   ! This destroys the removed element.
   !
   FTL_TEMPLATE_TYPE function PopFront(self)
      class(CAT(ftlList,FTL_TEMPLATE_TYPE_NAME)), intent(inout), target :: self

      class(ListNode), pointer :: oldfirst
      oldfirst => self%sentinel%next

      PopFront = self%front
      self%psize = self%psize - 1
      call UnlinkNode(oldfirst)
      deallocate(oldfirst)
      call self%FixValuePtrs()

   end function



   ! Adds a new element at the end of the list, after its current last element. The content of val is copied to
   ! the new element.
   !
   ! This effectively increases the container size by one.
   !
   subroutine PushBack(self, val)
      class(CAT(ftlList,FTL_TEMPLATE_TYPE_NAME)), intent(inout) :: self
      FTL_TEMPLATE_TYPE                         , intent(in)    :: val

      call InsertNodeAfter(self%sentinel%prev, val)
      self%psize = self%psize + 1
      call self%FixValuePtrs()

   end subroutine



   ! Removes the last element in the list, effectively reducing the container size by one.
   !
   ! This destroys the removed element.
   !
   FTL_TEMPLATE_TYPE function PopBack(self)
      class(CAT(ftlList,FTL_TEMPLATE_TYPE_NAME)), intent(inout), target :: self

      class(ListNode), pointer :: oldlast
      oldlast => self%sentinel%prev

      PopBack = self%back
      self%psize = self%psize - 1
      call UnlinkNode(oldlast)
      deallocate(oldlast)
      call self%FixValuePtrs()

   end function



   ! Removes from the list container either a single element (position) or a range of elements ([first,last)).
   !
   ! This effectively reduces the container size by the number of elements removed, which are destroyed.
   !
   ! Unlike other standard sequence containers, list and forward_list objects are specifically designed to be efficient
   ! inserting and removing elements in any position, even in the middle of the sequence.
   !
   subroutine EraseSingle(self, position)
      class(CAT(ftlList,FTL_TEMPLATE_TYPE_NAME))         , intent(inout) :: self
      type(CAT3(ftlList,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(inout) :: position

      call UnlinkNode(position%node)
      deallocate(position%node)
      self%psize = self%psize - 1
      call self%FixValuePtrs()

   end subroutine
   !
   subroutine EraseIteratorPair(self, first, last)
      class(CAT(ftlList,FTL_TEMPLATE_TYPE_NAME))         , intent(inout) :: self
      type(CAT3(ftlList,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(inout) :: first
      type(CAT3(ftlList,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in)    :: last

      type(CAT3(ftlList,FTL_TEMPLATE_TYPE_NAME,Iterator)) :: deletor
      associate(walker => first)

      do while (walker /= last)
         deletor = walker
         call walker%Inc()
         call self%EraseSingle(deletor)
      enddo

      end associate
   end subroutine



   ! Exchanges the content of the container by the content of another list of the same type. Sizes may differ.
   !
   ! After the call to this member function, the elements in this container are those which were in x before the call, and
   ! the elements of x are those which were in this. All iterators, references and pointers remain valid for the swapped
   ! objects.
   !
   subroutine Swap(self, other)
      class(CAT(ftlList,FTL_TEMPLATE_TYPE_NAME)), intent(inout), target :: self
      class(CAT(ftlList,FTL_TEMPLATE_TYPE_NAME)), intent(inout), target :: other

      integer :: tmpSize
      type(ListNode) :: tmpNode

      ! fix pointers from data nodes to the sentinels

      self%sentinel%prev%next => other%sentinel
      self%sentinel%next%prev => other%sentinel

      other%sentinel%prev%next => self%sentinel
      other%sentinel%next%prev => self%sentinel

      ! exchange sentinels themselves

      tmpNode = self%sentinel
      tmpSize = self%psize

      self%sentinel = other%sentinel
      self%psize    = other%psize

      other%sentinel = tmpNode
      other%psize    = tmpSize

      ! fix front/back pointers for both lists

      call self%FixValuePtrs()
      call other%FixValuePtrs()

   end subroutine



   ! Resizes the container so that it contains n elements.
   !
   ! If n is smaller than the current container size, the content is reduced to its first n elements, removing those beyond
   ! (and destroying them).
   !
   ! If n is greater than the current container size, the content is expanded by inserting at the end as many elements as
   ! needed to reach a size of n. If val is specified, the new elements are initialized as copies of val, otherwise, they are
   ! value-initialized.
   !
   ! Notice that this function changes the actual content of the container by inserting or erasing elements from it.
   !
   subroutine Resize(self, n, val)
      class(CAT(ftlList,FTL_TEMPLATE_TYPE_NAME)), intent(inout)           :: self
      integer                                   , intent(in)              :: n
      FTL_TEMPLATE_TYPE                         , intent(in)   , optional :: val

      type(CAT3(ftlList,FTL_TEMPLATE_TYPE_NAME,Iterator)) :: it
      integer :: i

      if (n == self%psize) then
         return
      else if (n < self%psize) then
         it = self%Begin()
         do i = 2, n
            call it%Inc()
         enddo
         call it%Inc()
         call self%Erase(it,self%End())
      else ! n > self%psize
         do i = 1, n - self%psize
            call InsertNodeAfter(self%sentinel%prev, val)
         enddo
      endif

      self%psize = n
      call self%FixValuePtrs()

   end subroutine



   ! Removes all elements from the list container (which are destroyed), and leaving the container with a size of 0.
   !
   subroutine Clear(self)
      class(CAT(ftlList,FTL_TEMPLATE_TYPE_NAME)), intent(inout) :: self

      call self%Delete()
      call self%New()

   end subroutine



   ! =============> Internal methods:



   subroutine InsertNodeBefore(beforenode, val)
      class(ListNode), pointer, intent(inout)           :: beforenode
      FTL_TEMPLATE_TYPE       , intent(in)   , optional :: val

      class(ListNode), pointer :: oldprev, newprev

      oldprev => beforenode%prev
      allocate(DataNode::beforenode%prev)
      newprev => beforenode%prev
      newprev%next => beforenode
      newprev%prev => oldprev
      oldprev%next => newprev
      if (present(val)) then
         select type (newprev)
         type is (DataNode) ! always true
            newprev%data = val
         end select
      endif

   end subroutine



   subroutine InsertNodeAfter(afternode, val)
      class(ListNode), pointer, intent(inout)           :: afternode
      FTL_TEMPLATE_TYPE       , intent(in)   , optional :: val

      class(ListNode), pointer :: oldnext, newnext

      oldnext => afternode%next
      allocate(DataNode::afternode%next)
      newnext => afternode%next
      newnext%prev => afternode
      newnext%next => oldnext
      oldnext%prev => newnext
      if (present(val)) then
         select type (newnext)
         type is (DataNode) ! always true
            newnext%data = val
         end select
      endif

   end subroutine



   subroutine UnlinkNode(node)
      class(ListNode), intent(inout) :: node

      node%next%prev => node%prev
      node%prev%next => node%next

   end subroutine



   subroutine FixValuePtrs(self)
      class(CAT(ftlList,FTL_TEMPLATE_TYPE_NAME)), intent(inout) :: self

      if (self%psize == 0) then
         nullify(self%front,self%back)
      else
         select type (first => self%sentinel%next)
         type is (DataNode)
            self%front => first%data
         end select
         select type (last => self%sentinel%prev)
         type is (DataNode)
            self%back => last%data
         end select
      endif

   end subroutine




! ====== Implementation of ftlListIterator methods ===============================================================================



   subroutine NewItDefault(self)
      class(CAT3(ftlList,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(out) :: self

      ! Nothing to do here: intent(out) already resets everything

   end subroutine
   !
   subroutine NewItCopyOther(self, other)
      class(CAT3(ftlList,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(out) :: self
      class(CAT3(ftlList,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in)  :: other

      self%node => other%node
      select type (node => self%node)
      type is (DataNode)
         self%value => node%data
      end select

   end subroutine



   ! =============> Arithmetic operations:



   subroutine Inc(self)
      class(CAT3(ftlList,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(inout) :: self

      self%node => self%node%next
      select type (node => self%node)
      type is (DataNode)
         self%value => node%data
      end select

   end subroutine
   !
   subroutine Dec(self)
      class(CAT3(ftlList,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(inout) :: self

      self%node => self%node%prev
      select type (node => self%node)
      type is (DataNode)
         self%value => node%data
      end select

   end subroutine



   ! =============> Logical operations:



   pure logical function EqualOther(self, other)
      class(CAT3(ftlList,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in) :: self
      class(CAT3(ftlList,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in) :: other

      EqualOther = associated(self%node,other%node)

   end function
   !
   pure logical function UnequalOther(self, other)
      class(CAT3(ftlList,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in) :: self
      class(CAT3(ftlList,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in) :: other

      UnequalOther = .not.associated(self%node,other%node)

   end function


end module
#endif
