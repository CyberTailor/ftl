! Copyright (c) 2016, 2017  Robert RÃ¼ger
!
! This file is part of of the Fortran Template Library.
!
! The Fortran Template Library is free software: you can redistribute it and/or
! modify it under the terms of the GNU Lesser General Public License as
! published by the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! The Fortran Template Library is distributed in the hope that it will be
! useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser
! General Public License for more details.
!
! You should have received a copy of the GNU Lesser General Public License along
! with the Fortran Template Library.  If not, see <http://www.gnu.org/licenses/>.


!   ftlDynArray
!   ===========
!
! DynArrays are sequence containers representing arrays that can change in size.
!
! Just like arrays, dynArrays use contiguous storage locations for their elements, which means that their elements can
! also be accessed using offsets on regular pointers to its elements, and just as efficiently as in arrays. But unlike
! arrays, their size can change dynamically, with their storage being handled automatically by the container.
!
! Internally, dynArrays use a dynamically allocated array to store their elements. This array may need to be reallocated
! in order to grow in size when new elements are inserted, which implies allocating a new array and moving all elements
! to it. This is a relatively expensive task in terms of processing time, and thus, dynArrays do not reallocate each time
! an element is added to the container.
!
! Instead, dynArray containers may allocate some extra storage to accommodate for possible growth, and thus the container
! may have an actual capacity greater than the storage strictly needed to contain its elements (i.e., its size).
! Libraries can implement different strategies for growth to balance between memory usage and reallocations, but in any
! case, reallocations should only happen at logarithmically growing intervals of size so that the insertion of
! individual elements at the end of the dynArray can be provided with amortized constant time complexity (see push_back).
!
! Therefore, compared to arrays, dynArrays consume more memory in exchange for the ability to manage storage and grow
! dynamically in an efficient way.
!
! Compared to the other dynamic sequence containers (deques, lists and forward_lists), dynArrays are very efficient
! accessing its elements (just like arrays) and relatively efficient adding or removing elements from its end. For
! operations that involve inserting or removing elements at positions other than the end, they perform worse than the
! others, and have less consistent iterators and references than lists and forward_lists.

#define FTL_CONTAINER ftlDynArray
#define FTL_CONTAINER_PROVIDES_RANDOM_ACCESS_ITERATOR

#ifdef FTL_INSTANTIATE_TEMPLATE

#if !defined(FTL_TEMPLATE_TYPE)
#error FTL_TEMPLATE_TYPE must be defined when instantiating ftlDynArray
#endif
#if !defined(FTL_TEMPLATE_TYPE_NAME)
#error FTL_TEMPLATE_TYPE_NAME must be defined when instantiating ftlDynArray
#endif

#include "ftlMacros.inc"

#ifdef FTL_TEMPLATE_TYPE_IS_DERIVED
#define FTL_TEMPLATE_TYPE_WRAP type(FTL_TEMPLATE_TYPE)
#else
#define FTL_TEMPLATE_TYPE_WRAP FTL_TEMPLATE_TYPE
#endif


module CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Module)

#ifdef FTL_TEMPLATE_TYPE_MODULE
   use FTL_TEMPLATE_TYPE_MODULE
#endif

   implicit none
   private

! ====== Type of the ftlDynArray container itself ==================================================================================

   type, public :: CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME)
      private

      integer                                     :: psize = 0
      FTL_TEMPLATE_TYPE_WRAP, allocatable         :: storage(:)
      FTL_TEMPLATE_TYPE_WRAP, pointer    , public :: data(:) => null()
      FTL_TEMPLATE_TYPE_WRAP, pointer    , public :: front => null()
      FTL_TEMPLATE_TYPE_WRAP, pointer    , public :: back => null()

   contains
      private

      procedure         :: NewDefault
      procedure         :: NewCopyOther
      procedure         :: NewFill
      procedure         :: NewFromArray
      generic  , public :: New => NewDefault, NewCopyOther, NewFill, NewFromArray

      procedure         :: AssignOther
      procedure         :: AssignArray
      generic  , public :: assignment(=) => AssignOther, AssignArray

      procedure, public :: Delete

      procedure         :: BeginDynArray
      generic  , public :: Begin => BeginDynArray
      procedure         :: EndDynArray
      generic  , public :: End => EndDynArray

      procedure         :: SizeDynArray
      generic  , public :: Size => SizeDynArray

      procedure, public :: Resize
      procedure, public :: Capacity
      procedure, public :: Empty
      procedure, public :: Reserve
      procedure, public :: ShrinkToFit

      procedure, public :: PushBack
      procedure, public :: PopBack

      procedure         :: InsertSingle
      procedure         :: InsertSingleAtIndex
      procedure         :: InsertFill
      procedure         :: InsertFillAtIndex
      procedure         :: InsertArray
      procedure         :: InsertArrayAtIndex
      procedure         :: InsertIteratorPair
      procedure         :: InsertIteratorPairAtIndex
      generic  , public :: Insert => InsertSingle, InsertFill, InsertArray, InsertIteratorPair, &
                                     InsertSingleAtIndex, InsertFillAtIndex, InsertArrayAtIndex, InsertIteratorPairAtIndex

      procedure         :: EraseSingle
      procedure         :: EraseSingleIndex
      procedure         :: EraseIndexPair
      procedure         :: EraseIteratorPair
      generic  , public :: Erase => EraseSingle, EraseSingleIndex, EraseIndexPair, EraseIteratorPair

      procedure, public :: Clear

      procedure         :: ChangeCapacity
      procedure         :: IncreaseCapacity

      procedure         :: FixValuePtrs

   end type

   public :: Begin
   interface Begin
      module procedure BeginDynArray
   end interface

   public :: End
   interface End
      module procedure EndDynArray
   end interface

   public :: Size
   interface Size
      module procedure SizeDynArray
   end interface


! ====== Type of an iterator over a ftlDynArray container ==========================================================================

   type, public :: CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)
      private

      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME)), pointer         :: dynArray => null()
      integer                                                         :: index = 0
      FTL_TEMPLATE_TYPE_WRAP                        , pointer, public :: value => null()

   contains
      private

      procedure         :: NewItDefault
      procedure         :: NewItCopyOther
      generic  , public :: New => NewItDefault, NewItCopyOther

      procedure, public :: Inc
      procedure, public :: Dec

   end type

   public :: operator(+)
   interface operator(+)
      module procedure AdvanceN
   end interface

   public :: operator(-)
   interface operator(-)
      module procedure ReverseN, DiffOther
   end interface

   public :: operator(==)
   interface operator(==)
      module procedure EqualOther
   end interface

   public :: operator(/=)
   interface operator(/=)
      module procedure UnequalOther
   end interface

   public :: operator(<)
   interface operator(<)
      module procedure SmallerOther
   end interface

   public :: operator(<=)
   interface operator(<=)
      module procedure SmallerEqualOther
   end interface

   public :: operator(>)
   interface operator(>)
      module procedure GreaterOther
   end interface

   public :: operator(>=)
   interface operator(>=)
      module procedure GreaterEqualOther
   end interface


contains



! ====== Implementation of ftlDynArray methods ===================================================================================


   ! Constructs a dynArray, initializing its contents depending on the constructor version used:
   !
   subroutine NewDefault(self)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME)), intent(out) :: self

      ! Constructs an empty dynArray, with no elements.

      allocate(self%storage(0))
      call self%FixValuePtrs()

   end subroutine
   !
   subroutine NewCopyOther(self, other)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME)), intent(out) :: self
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME)), intent(in)  :: other

      ! Constructs a dynArray as a copy of another dynArray.

      allocate(self%storage(other%psize))
      self%storage = other%storage(1:other%psize)
      self%psize = other%psize
      call self%FixValuePtrs()

   end subroutine
   !
   subroutine NewFill(self, n, val)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME)), intent(out)          :: self
      integer                                       , intent(in)           :: n
      FTL_TEMPLATE_TYPE_WRAP                        , intent(in), optional :: val

      ! Constructs a container with n elements. Each element is a copy of val (if present).

      allocate(self%storage(n))
      if (present(val)) self%storage = val
      self%psize = n
      call self%FixValuePtrs()

   end subroutine
   !
   subroutine NewFromArray(self, array)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME)), intent(out) :: self
      FTL_TEMPLATE_TYPE_WRAP                      , intent(in)  :: array(:)

      ! Constructs a container with a copy of each of the elements in array, in the same order.

      allocate(self%storage(size(array)))
      self%storage = array
      self%psize = size(array)
      call self%FixValuePtrs()

   end subroutine



   subroutine Delete(self)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME)), intent(out) :: self

      ! Nothing to do here: intent(out) will deallocate self%storage and reset self%psize and self%data

   end subroutine



   ! Assigns new contents to the container, replacing its current contents, and modifying its size accordingly.
   !
   subroutine AssignArray(self, array)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME)), intent(inout) :: self
      FTL_TEMPLATE_TYPE_WRAP                        , intent(in)    :: array(:)

      call self%Reserve(size(array))
      self%storage(1:size(array)) = array
      self%psize = size(array)
      call self%FixValuePtrs()

   end subroutine
   !
   subroutine AssignOther(self, other)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME)), intent(inout) :: self
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME)), intent(in)    :: other

      call self%Reserve(size(other))
      self%storage(1:size(other)) = other%data
      self%psize = size(other)
      call self%FixValuePtrs()

   end subroutine



   ! =============> Iterators:



   ! Returns an iterator pointing to the first element in the dynArray.
   !
   ! Notice that, unlike member dynArray%front, which returns a reference to the first element, this function returns a random
   ! access iterator pointing to it.
   !
   ! If the container is empty, the returned iterator value shall not be dereferenced.
   !
   type(CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)) function BeginDynArray(self) result(Begin)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME)), intent(in), target :: self

      Begin%dynArray => self
      Begin%index = 1
      if (self%psize /= 0) Begin%value => self%storage(1)

   end function



   ! Returns an iterator referring to the past-the-end element in the dynArray container.
   !
   ! The past-the-end element is the theoretical element that would follow the last element in the dynArray. It does not point
   ! to any element, and thus shall not be dereferenced.
   !
   ! Because the ranges used by functions of the standard library do not include the element pointed by their closing
   ! iterator, this function is often used in combination with dynArray%begin to specify a range including all the elements in
   ! the container.
   !
   ! If the container is empty, this function returns the same as dynArray%begin.
   !
   type(CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)) function EndDynArray(self) result(End)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME)), intent(in), target :: self

      End%dynArray => self
      End%index = self%psize + 1

   end function



   ! =============> Capacity:



   ! Returns the number of elements in the dynArray.
   !
   ! This is the number of actual objects held in the dynArray, which is not necessarily equal to its storage capacity.
   !
   pure integer function SizeDynArray(self) result(Size)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME)), intent(in) :: self

      Size = self%psize

   end function


   ! Resizes the container so that it contains n elements.
   !
   ! If n is smaller than the current container size, the content is reduced to its first n elements, removing those beyond
   ! (and destroying them).
   !
   ! If n is greater than the current container size, the content is expanded by inserting at the end as many elements as
   ! needed to reach a size of n. If val is specified, the new elements are initialized as copies of val, otherwise, they are
   ! value-initialized.
   !
   ! If n is also greater than the current container capacity, an automatic reallocation of the allocated storage space takes
   ! place.
   !
   ! Notice that this function changes the actual content of the container by inserting or erasing elements from it.
   !
   subroutine Resize(self, n, val)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME)), intent(inout)        :: self
      integer                                       , intent(in)           :: n
      FTL_TEMPLATE_TYPE_WRAP                        , intent(in), optional :: val

      if (n == self%psize) return

      if (n > self%Capacity()) call self%ChangeCapacity(n)
      if (present(val) .and. n > self%psize) self%storage(self%psize+1:n) = val
      self%psize = n
      call self%FixValuePtrs()

   end subroutine



   ! Returns the size of the storage space currently allocated for the dynArray, expressed in terms of elements.
   !
   ! This capacity is not necessarily equal to the dynArray size. It can be equal or greater, with the extra space allowing to
   ! accommodate for growth without the need to reallocate on each insertion.
   !
   ! Notice that this capacity does not suppose a limit on the size of the dynArray. When this capacity is exhausted and more is
   ! needed, it is automatically expanded by the container (reallocating it storage space).
   !
   ! The capacity of a dynArray can be explicitly altered by calling member ftlDynArray%reserve.
   !
   pure integer function Capacity(self)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME)), intent(in) :: self

      if (allocated(self%storage)) then
         Capacity = size(self%storage)
      else
         Capacity = 0
      endif

   end function



   ! Returns whether the dynArray is empty (i.e. whether its size is 0).
   !
   ! This function does not modify the container in any way. To clear the content of a dynArray, see ftlDynArray%clear.
   !
   pure logical function Empty(self)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME)), intent(in) :: self

      Empty = (self%psize == 0)

   end function



   ! Requests that the dynArray capacity be at least enough to contain n elements.
   !
   ! If n is greater than the current dynArray capacity, the function causes the container to reallocate its storage increasing
   ! its capacity to n (or greater).
   !
   ! In all other cases, the function call does not cause a reallocation and the dynArray capacity is not affected.
   !
   ! This function has no effect on the dynArray size and cannot alter its elements.
   !
   subroutine Reserve(self, n)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME)), intent(inout) :: self
      integer                                       , intent(in)    :: n

      if (n > self%Capacity()) call self%ChangeCapacity(n)

   end subroutine



   ! Requests the container to reduce its capacity to fit its size.
   !
   ! The request is non-binding, and the container implementation is free to optimize otherwise and leave the dynArray with a
   ! capacity greater than its size.
   !
   ! This may cause a reallocation, but has no effect on the dynArray size and cannot alter its elements.
   !
   subroutine ShrinkToFit(self)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME)), intent(inout) :: self

      call self%ChangeCapacity(self%psize)

   end subroutine



   ! =============> Modifiers:



   ! Adds a new element at the end of the dynArray, after its current last element. The content of val is copied to
   ! the new element.
   !
   ! This effectively increases the container size by one, which causes an automatic reallocation of the allocated storage
   ! space if -and only if- the new dynArray size surpasses the current dynArray capacity.
   !
   subroutine PushBack(self, val)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME)), intent(inout) :: self
      FTL_TEMPLATE_TYPE_WRAP                        , intent(in)    :: val

      if (self%psize + 1 > self%Capacity()) call self%IncreaseCapacity()
      self%psize = self%psize + 1
      self%storage(self%psize) = val
      call self%FixValuePtrs()

   end subroutine



   ! Removes the last element in the dynArray, effectively reducing the container size by one.
   !
   ! This destroys the removed element.
   !
   FTL_TEMPLATE_TYPE_WRAP function PopBack(self)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME)), intent(inout) :: self

      PopBack = self%storage(self%psize)
      self%psize = self%psize - 1
      call self%FixValuePtrs()

   end function



   ! The dynArray is extended by inserting new elements before the element at the specified position, effectively increasing
   ! the container size by the number of elements inserted.  This causes an automatic reallocation of the allocated storage
   ! space if -and only if- the new dynArray size surpasses the current dynArray capacity.
   !
   ! Because dynArrays use an array as their underlying storage, inserting elements in positions other than the dynArray end
   ! causes the container to relocate all the elements that were after position to their new positions. This is generally an
   ! inefficient operation compared to the one performed for the same operation by other kinds of sequence containers (such
   ! as list or forward_list).
   !
   ! The parameters determine how many elements are inserted and to which values they are initialized:
   !
   subroutine InsertSingleAtIndex(self, position, val)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME)), intent(inout) :: self
      integer                                       , intent(in)    :: position
      FTL_TEMPLATE_TYPE_WRAP                        , intent(in)    :: val

      call self%InsertArrayAtIndex(position, [val])

   end subroutine
   !
   subroutine InsertSingle(self, position, val)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME))         , intent(inout) :: self
      type(CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in)    :: position
      FTL_TEMPLATE_TYPE_WRAP                                 , intent(in)    :: val

      call self%InsertArrayAtIndex(position%index, [val])

   end subroutine
   !
   subroutine InsertFillAtIndex(self, position, n, val)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME)), intent(inout) :: self
      integer                                       , intent(in)    :: position
      integer                                       , intent(in)    :: n
      FTL_TEMPLATE_TYPE_WRAP                        , intent(in)    :: val

      integer :: i

      call self%InsertArrayAtIndex(position, [(val, i=1,n)])

   end subroutine
   !
   subroutine InsertFill(self, position, n, val)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME))         , intent(inout) :: self
      type(CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in)    :: position
      integer                                                , intent(in)    :: n
      FTL_TEMPLATE_TYPE_WRAP                                 , intent(in)    :: val

      integer :: i

      call self%InsertArrayAtIndex(position%index, [(val, i=1,n)])

   end subroutine
   !
   subroutine InsertArrayAtIndex(self, position, array)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME)), intent(inout) :: self
      integer                                       , intent(in)    :: position
      FTL_TEMPLATE_TYPE_WRAP                        , intent(in)    :: array(:)

      integer :: i

      if (size(array) == 0) return

      if (self%psize + size(array) > 2 * self%Capacity()) then
         call self%ChangeCapacity(self%psize + size(array))
      elseif (self%psize + size(array) > self%Capacity()) then
         call self%IncreaseCapacity()
      endif

      do i = self%psize, position, -1
         self%storage(i+size(array)) = self%storage(i)
      enddo

      self%storage(position:position+size(array)-1) = array

      self%psize = self%psize + size(array)
      call self%FixValuePtrs()

   end subroutine
   !
   subroutine InsertArray(self, position, array)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME))         , intent(inout) :: self
      type(CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in)    :: position
      FTL_TEMPLATE_TYPE_WRAP                                 , intent(in)    :: array(:)

      call self%InsertArrayAtIndex(position%index, array)

   end subroutine
   !
   subroutine InsertIteratorPairAtIndex(self, position, first, last)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME))         , intent(inout) :: self
      integer                                                , intent(in)    :: position
      type(CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in)    :: first
      type(CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in)    :: last

      call self%InsertArrayAtIndex(position, first%dynArray%data(first%index:last%index-1))

   end subroutine
   !
   subroutine InsertIteratorPair(self, position, first, last)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME))         , intent(inout) :: self
      type(CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in)    :: position
      type(CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in)    :: first
      type(CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in)    :: last

      call self%InsertArrayAtIndex(position%index, first%dynArray%data(first%index:last%index-1))

   end subroutine



   ! Removes from the dynArray either a single element (position) or a range of elements [first,last).
   !
   ! This effectively reduces the container size by the number of elements removed, which are destroyed.
   !
   ! Because dynArrays use an array as their underlying storage, erasing elements in positions other than the dynArray end causes
   ! the container to relocate all the elements after the segment erased to their new positions. This is generally an
   ! inefficient operation compared to the one performed for the same operation by other kinds of sequence containers (such
   ! as list or forward_list).
   !
   subroutine EraseSingle(self, position)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME))         , intent(inout) :: self
      type(CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in)    :: position

      call self%EraseIndexPair(position%index, position%index+1)

   end subroutine
   !
   subroutine EraseSingleIndex(self, position)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME)), intent(inout) :: self
      integer                                       , intent(in)    :: position

      call self%EraseIndexPair(position, position+1)

   end subroutine
   !
   subroutine EraseIndexPair(self, first, last)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME)), intent(inout) :: self
      integer                                       , intent(in)    :: first
      integer                                       , intent(in)    :: last

      integer :: i, numerased

      if (last <= first) return

      numerased = last - first

      do i = first, self%psize - numerased
         self%storage(i) = self%storage(i+numerased)
      enddo

      self%psize = self%psize - numerased
      call self%FixValuePtrs()

   end subroutine
   !
   subroutine EraseIteratorPair(self, first, last)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME))         , intent(inout) :: self
      type(CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in)    :: first
      type(CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in)    :: last

      call self%EraseIndexPair(first%index, last%index)

   end subroutine



   ! Removes all elements from the dynArray (which are destroyed), leaving the container with a size of 0.
   !
   ! A reallocation is not guaranteed to happen, and the dynArray capacity is not guaranteed to change due to calling this
   ! function.
   !
   subroutine Clear(self)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME)), intent(inout) :: self

      call self%EraseIndexPair(1, self%psize+1)

   end subroutine



   ! =============> Internal methods:



   subroutine FixValuePtrs(self)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME)), intent(inout), target :: self

      self%data => self%storage(1:self%psize)
      if (self%psize == 0) then
         ! not strictly necessary, because it will always crash if someone accesses front/back on an empty dynArray ...
         nullify(self%front, self%back)
      else
         self%front => self%storage(1)
         self%back => self%storage(self%psize)
      endif

   end subroutine



   subroutine ChangeCapacity(self, n)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME)), intent(inout) :: self
      integer                                       , intent(in)    :: n

      FTL_TEMPLATE_TYPE_WRAP, allocatable :: newstorage(:)
      integer :: numretain

      if (n == self%Capacity()) return

      allocate(newstorage(n))

      numretain = min(self%psize, n)
      newstorage(1:numretain) = self%storage(1:numretain)

      call move_alloc(newstorage, self%storage)

   end subroutine



   subroutine IncreaseCapacity(self)
      class(CAT(ftlDynArray,FTL_TEMPLATE_TYPE_NAME)), intent(inout) :: self

      call self%changeCapacity(max(2 * self%Capacity(), 1))

   end subroutine



! ====== Implementation of ftlDynArrayIterator methods ===========================================================================



   subroutine NewItDefault(self)
      class(CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(out) :: self

      ! Nothing to do here: intent(out) already resets everything

   end subroutine
   !
   subroutine NewItCopyOther(self, other)
      class(CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(out) :: self
      class(CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in)  :: other

      self%dynArray => other%dynArray
      self%index = other%index
      if (self%dynArray%psize > 0 .and. self%index <= self%dynArray%psize) self%value => self%dynArray%storage(self%index)

   end subroutine



   ! =============> Arithmetic operations:



   subroutine Inc(self)
      class(CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(inout) :: self

      self%index =  self%index + 1
      if (self%index <= self%dynArray%psize) then
         self%value => self%dynArray%storage(self%index)
      else
         nullify(self%value)
      endif

   end subroutine
   !
   subroutine Dec(self)
      class(CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(inout) :: self

      self%index =  self%index - 1
      if (self%index > 0) then
         self%value => self%dynArray%storage(self%index)
      else
         nullify(self%value)
      endif

   end subroutine



   type(CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)) function AdvanceN(self, n)
      class(CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in) :: self
      integer                                                 , intent(in) :: n

      call AdvanceN%New(self)
      AdvanceN%index =  AdvanceN%index + n
      if (AdvanceN%index <= AdvanceN%dynArray%psize) then
         AdvanceN%value => AdvanceN%dynArray%storage(AdvanceN%index)
      else
         nullify(AdvanceN%value)
      endif

   end function
   !
   type(CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)) function ReverseN(self, n)
      class(CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in) :: self
      integer                                                 , intent(in) :: n

      call ReverseN%New(self)
      ReverseN%index =  ReverseN%index - n
      if (ReverseN%index > 0) then
         ReverseN%value => ReverseN%dynArray%storage(ReverseN%index)
      else
         nullify(ReverseN%value)
      endif

   end function



   pure integer function DiffOther(self, other)
      class(CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in) :: self
      class(CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in) :: other

      if (associated(self%dynArray,other%dynArray)) then
         DiffOther = self%index - other%index
      else
         DiffOther = huge(0)
      endif

   end function



   ! =============> Logical operations:



   pure logical function EqualOther(self, other)
      class(CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in) :: self
      class(CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in) :: other

      EqualOther = associated(self%dynArray,other%dynArray) .and. (self%index == other%index)

   end function
   !
   pure logical function UnequalOther(self, other)
      class(CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in) :: self
      class(CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in) :: other

      UnequalOther = .not.associated(self%dynArray,other%dynArray) .or. (self%index /= other%index)

   end function
   !
   pure logical function SmallerOther(self, other)
      class(CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in) :: self
      class(CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in) :: other

      SmallerOther = associated(self%dynArray,other%dynArray) .and. (self%index < other%index)

   end function
   !
   pure logical function SmallerEqualOther(self, other)
      class(CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in) :: self
      class(CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in) :: other

      SmallerEqualOther = associated(self%dynArray,other%dynArray) .and. (self%index <= other%index)

   end function
   !
   pure logical function GreaterOther(self, other)
      class(CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in) :: self
      class(CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in) :: other

      GreaterOther = associated(self%dynArray,other%dynArray) .and. (self%index > other%index)

   end function
   !
   pure logical function GreaterEqualOther(self, other)
      class(CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in) :: self
      class(CAT3(ftlDynArray,FTL_TEMPLATE_TYPE_NAME,Iterator)), intent(in) :: other

      GreaterEqualOther = associated(self%dynArray,other%dynArray) .and. (self%index >= other%index)

   end function


end module
#endif
