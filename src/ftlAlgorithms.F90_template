! The algorithms library defines functions for a variety of purposes (e.g. searching, sorting, counting, manipulating)
! that operate on ranges of elements. Note that a range is defined as [first, last) where last refers to the element past
! the last element to inspect or modify.
!
! A range is any sequence of objects that can be accessed through iterators or pointers, such as an array or an instance
! of some of the FTL containers. Notice though, that algorithms operate through iterators directly on the values, not
! affecting in any way the structure of any possible container (it never affects the size or storage allocation of the
! container).

#ifdef FTL_INSTANTIATE_TEMPLATE

#if !defined(FTL_TEMPLATE_TYPE)
#error FTL_TEMPLATE_TYPE must be defined when instantiating ftlAlgorithms
#endif
#if !defined(FTL_TEMPLATE_TYPE_NAME)
#error FTL_TEMPLATE_TYPE_NAME must be defined when instantiating ftlAlgorithms
#endif
#if !defined(FTL_CONTAINER)
#error FTL_CONTAINER must be defined when instantiating ftlAlgorithms
#endif
#if !defined(FTL_CONTAINER_PROVIDES_FORWARD_ITERATOR)       && \
    !defined(FTL_CONTAINER_PROVIDES_BIDIRECTIONAL_ITERATOR) && \
    !defined(FTL_CONTAINER_PROVIDES_RANDOM_ACCESS_ITERATOR)
#error FTL_CONTAINER_PROVIDES_*_INTERATOR must be defined when instantiating ftlAlgorithms
#endif


module FTL_CONTAINER/**/FTL_TEMPLATE_TYPE_NAME/**/AlgorithmsModule

#ifdef FTL_TEMPLATE_TYPE_MODULE
   use FTL_TEMPLATE_TYPE_MODULE
#endif
   use FTL_CONTAINER/**/FTL_TEMPLATE_TYPE_NAME/**/Module

   implicit none
   private

   public :: ftlSort
   interface ftlSort
      module procedure ftlSort/**/FTL_CONTAINER/**/FTL_TEMPLATE_TYPE_NAME
   end interface

   abstract interface
      pure logical function Comparator(a, b)
         FTL_TEMPLATE_TYPE, intent(in) :: a, b
      end function
   end interface

contains

   subroutine ftlSort/**/FTL_CONTAINER/**/FTL_TEMPLATE_TYPE_NAME(container, comp)
      type(FTL_CONTAINER/**/FTL_TEMPLATE_TYPE_NAME), intent(inout) :: container
#ifdef FTL_TEMPLATE_TYPE_PROVIDES_COMPARATOR_SMALLER
      procedure(Comparator), optional :: comp
#else
      procedure(Comparator)           :: comp
#endif

      type(FTL_CONTAINER/**/FTL_TEMPLATE_TYPE_NAME/**/Iterator) :: i, j, smallestIt
      FTL_TEMPLATE_TYPE :: tmp

      ! TODO: implement something faster than selection sort ;-) ...

      j = container%Begin()
      do while (j /= container%End())
         smallestIt = j
         i = j
         call i%Inc()
         do while (i /= container%End())
#ifdef FTL_TEMPLATE_TYPE_PROVIDES_COMPARATOR_SMALLER
            if (present(comp)) then
               if (comp(i%value, smallestIt%value)) smallestIt = i
            else
               if (i%value < smallestIt%value) smallestIt = i
            endif
#else
            if (comp(i%value, smallestIt%value)) smallestIt = i
#endif
            call i%Inc()
         enddo
         tmp = j%value
         j%value = smallestIt%value
         smallestIt%value = tmp
         call j%Inc()
      enddo

   end subroutine

end module
#endif
