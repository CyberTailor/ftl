! Copyright (c) 2016, 2017  Robert RÃ¼ger
!
! This file is part of of the Fortran Template Library.
!
! The Fortran Template Library is free software: you can redistribute it and/or
! modify it under the terms of the GNU Lesser General Public License as
! published by the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! The Fortran Template Library is distributed in the hope that it will be
! useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser
! General Public License for more details.
!
! You should have received a copy of the GNU Lesser General Public License along
! with the Fortran Template Library.  If not, see <http://www.gnu.org/licenses/>.


!   ftlUnorderedMap
!   ===============
!
! Unordered maps are associative containers that store elements formed by the combination of a key value and a mapped
! value, and which allows for fast retrieval of individual elements based on their keys.
!
! In an unordered_map, the key value is generally used to uniquely identify the element, while the mapped value is an
! object with the content associated to this key. Types of key and mapped value may differ.
!
! Internally, the elements in the unordered_map are not sorted in any particular order with respect to either their key or
! mapped values, but organized into buckets depending on their hash values to allow for fast access to individual elements
! directly by their key values (with a constant average time complexity on average).
!
! unordered_map containers are faster than map containers to access individual elements by their key, although they are
! generally less efficient for range iteration through a subset of their elements.
!
! Unordered maps implement the direct access operator (operator[]) which allows for direct access of the mapped value
! using its key value as argument.
!
! Iterators in the container are at least forward iterators.

#define FTL_CONTAINER ftlUnorderedMap
#define FTL_CONTAINER_PROVIDES_FORWARD_ITERATOR

#ifdef FTL_INSTANTIATE_TEMPLATE

#if !defined(FTL_TEMPLATE_TYPE)
#error FTL_TEMPLATE_TYPE must be defined when instantiating ftlUnorderedMap
#endif
#if !defined(FTL_TEMPLATE_TYPE_NAME)
#error FTL_TEMPLATE_TYPE_NAME must be defined when instantiating ftlUnorderedMap
#endif
#if !defined(FTL_TEMPLATE_KEYTYPE)
#error FTL_TEMPLATE_KEYTYPE must be defined when instantiating ftlUnorderedMap
#endif
#if !defined(FTL_TEMPLATE_KEYTYPE_NAME)
#error FTL_TEMPLATE_KEYTYPE_NAME must be defined when instantiating ftlUnorderedMap
#endif

#include "ftlMacros.inc"

#ifdef FTL_TEMPLATE_TYPE_IS_DERIVED
#define FTL_TEMPLATE_TYPE_WRAP type(FTL_TEMPLATE_TYPE)
#else
#define FTL_TEMPLATE_TYPE_WRAP FTL_TEMPLATE_TYPE
#endif

#ifdef FTL_TEMPLATE_KEYTYPE_IS_DERIVED
#define FTL_TEMPLATE_KEYTYPE_WRAP type(FTL_TEMPLATE_KEYTYPE)
#else
#define FTL_TEMPLATE_KEYTYPE_WRAP FTL_TEMPLATE_KEYTYPE
#endif


module CAT4(ftlUnorderedMap,FTL_TEMPLATE_KEYTYPE_NAME,FTL_TEMPLATE_TYPE_NAME,Module)

#ifdef FTL_TEMPLATE_TYPE_MODULE
   use FTL_TEMPLATE_TYPE_MODULE
#endif
#ifdef FTL_TEMPLATE_KEYTYPE_MODULE
   use FTL_TEMPLATE_KEYTYPE_MODULE
#endif

   use ftlHashModule

   implicit none
   private

! ====== Type of the ftlUnorderedMap container itself ============================================================================

   type :: BaseEntry
      class(BaseEntry), pointer :: next => null()
   end type

   type, extends(BaseEntry) :: DataEntry
      FTL_TEMPLATE_KEYTYPE_WRAP :: key
      FTL_TEMPLATE_TYPE_WRAP    :: value
   end type


   type, public :: CAT3(ftlUnorderedMap,FTL_TEMPLATE_KEYTYPE_NAME,FTL_TEMPLATE_TYPE_NAME)
      private

      integer                      :: psize = 0
      type(BaseEntry), allocatable :: buckets(:)

   contains
      private

      procedure         :: NewDefault
      generic  , public :: New => NewDefault

      procedure, public :: Delete
#ifndef FTL_NO_FINALIZERS
      final             :: Finalizer
#endif

      procedure, public :: IsEmpty
      procedure         :: SizeUnorderedMap
      generic  , public :: Size => SizeUnorderedMap

      procedure, public :: Set
      procedure, public :: Get

      procedure, public :: BucketCount
      procedure, public :: BucketSize
      procedure, public :: Bucket

   end type

   public :: Size
   interface Size
      module procedure SizeUnorderedMap
   end interface


contains



! ====== Implementation of ftlUnorderedMap methods ===============================================================================


   ! Constructs an unordered_map container object, initializing its contents depending on the constructor version used:
   !
   subroutine NewDefault(self, n)
      class(CAT3(ftlUnorderedMap,FTL_TEMPLATE_KEYTYPE_NAME,FTL_TEMPLATE_TYPE_NAME)), intent(inout) :: self
      integer                                                                      , intent(in)    :: n

      call self%Delete()
      allocate(self%buckets(n))

   end subroutine


   ! Destructs the container object. This calls each of the contained element's destructors, and deallocates all the
   ! storage capacity allocated by the unordered_map container.
   !
   subroutine Delete(self)
      class(CAT3(ftlUnorderedMap,FTL_TEMPLATE_KEYTYPE_NAME,FTL_TEMPLATE_TYPE_NAME)), intent(inout), target :: self

      integer :: b
      class(BaseEntry), pointer :: walker, deleter

      if (allocated(self%buckets)) then
         do b = 1, size(self%buckets)
            walker => self%buckets(b)
            nullify(deleter)
            if (associated(walker%next)) then
               walker => walker%next
               deleter => walker
            endif
            do while (associated(walker%next))
               walker => walker%next
               deallocate(deleter)
               deleter => walker
            enddo
            if (associated(deleter)) deallocate(deleter)
         enddo
         deallocate(self%buckets)
      endif
      self%psize = 0

   end subroutine

#ifndef FTL_NO_FINALIZERS
   subroutine Finalizer(self)
      type(CAT3(ftlUnorderedMap,FTL_TEMPLATE_KEYTYPE_NAME,FTL_TEMPLATE_TYPE_NAME)), intent(inout) :: self
      call self%Delete()
   end subroutine
#endif



   ! =============> Capacity:



   ! Returns a logical value indicating whether the unordered_map container is empty, i.e. whether its size is 0.
   !
   ! This function does not modify the content of the container in any way. To clear the contents, member
   ! function ftlUnorderedMap%Clear() exists.
   !
   pure logical function IsEmpty(self)
      class(CAT3(ftlUnorderedMap,FTL_TEMPLATE_KEYTYPE_NAME,FTL_TEMPLATE_TYPE_NAME)), intent(in) :: self

      IsEmpty = (self%psize == 0)

   end function



   ! Returns the number of elements in the ftlUnorderedMap container.
   !
   pure integer function SizeUnorderedMap(self) result(size)
      class(CAT3(ftlUnorderedMap,FTL_TEMPLATE_KEYTYPE_NAME,FTL_TEMPLATE_TYPE_NAME)), intent(in) :: self

      size = self%psize

   end function



   ! =============> Element access:



   ! Sets the entry with key to value. If no entry with key exists, a new entry will be added.
   !
   subroutine Set(self, key, value)
      class(CAT3(ftlUnorderedMap,FTL_TEMPLATE_KEYTYPE_NAME,FTL_TEMPLATE_TYPE_NAME)), intent(inout), target :: self
      FTL_TEMPLATE_KEYTYPE_WRAP                                                    , intent(in)            :: key
      FTL_TEMPLATE_TYPE_WRAP                                                       , intent(in)            :: value

      class(BaseEntry), pointer :: entr

      entr => self%buckets(self%Bucket(key))
      do while (.true.)
         select type(entr)
         type is (DataEntry)
            if (key == entr%key) then
               entr%value = value
               return
            endif
         end select
         if (associated(entr%next)) then
            entr => entr%next
         else
            exit
         endif
      end do

      allocate(DataEntry::entr%next)
      self%psize = self%psize + 1

      entr => entr%next
      select type (entr)
      type is (DataEntry)
         entr%key = key
         entr%value = value
      end select

   end subroutine



   ! Get a pointer to the value stored for key. If no entry with key exists a null pointer is returned.
   !
   function Get(self, key) result(value)
      class(CAT3(ftlUnorderedMap,FTL_TEMPLATE_KEYTYPE_NAME,FTL_TEMPLATE_TYPE_NAME)), intent(in), target :: self
      FTL_TEMPLATE_KEYTYPE_WRAP                                                    , intent(in)         :: key
      FTL_TEMPLATE_TYPE_WRAP, pointer                                                                   :: value

      class(BaseEntry), pointer :: entr

      entr => self%buckets(self%Bucket(key))

      do while (associated(entr))
         select type(entr)
         type is (DataEntry)
            if (key == entr%key) then
               value => entr%value
               return
            endif
         end select
         entr => entr%next
      end do

      ! key not found
      nullify(value)

   end function



   ! =============> Buckets:



   ! Returns the number of buckets in the ftlUnorderedMap container.
   !
   ! A bucket is a slot in the container's internal hash table to which elements are assigned based on the hash value of
   ! their key.
   !
   ! The number of buckets influences directly the load factor of the container's hash table (and thus the probability of
   ! collision). The container automatically increases the number of buckets to keep the load factor below a specific
   ! threshold (its max_load_factor), causing a rehash each time the number of buckets needs to be increased.
   !
   pure integer function BucketCount(self)
      class(CAT3(ftlUnorderedMap,FTL_TEMPLATE_KEYTYPE_NAME,FTL_TEMPLATE_TYPE_NAME)), intent(in) :: self

      BucketCount = size(self%buckets)

   end function



   ! Returns the number of elements in bucket n.
   !
   ! A bucket is a slot in the container's internal hash table to which elements are assigned based on the hash value of
   ! their key.
   !
   ! The number of elements in a bucket influences the time it takes to access a particular element in the bucket. The
   ! container automatically increases the number of buckets to keep the load factor (which is the average bucket size)
   ! below its max_load_factor.
   !
   integer function BucketSize(self, n)
      class(CAT3(ftlUnorderedMap,FTL_TEMPLATE_KEYTYPE_NAME,FTL_TEMPLATE_TYPE_NAME)), intent(in), target :: self
      integer                                                                      , intent(in)         :: n

      class(BaseEntry), pointer :: entr

      entr => self%buckets(n)
      BucketSize = 0
      do while (associated(entr%next))
         BucketSize = BucketSize + 1
         entr => entr%next
      enddo

   end function



   ! Returns the bucket number where the element with key is located.
   !
   ! A bucket is a slot in the container's internal hash table to which elements are assigned based on the hash value of
   ! their key. Buckets are numbered from 1 to bucket_count.
   !
   ! Individual elements in a bucket can be accessed by means of the range iterators returned by ftlUnorderedMap%Begin()
   ! and ftlUnorderedMap%End().
   !
   pure integer function Bucket(self, key)
      class(CAT3(ftlUnorderedMap,FTL_TEMPLATE_KEYTYPE_NAME,FTL_TEMPLATE_TYPE_NAME)), intent(in) :: self
      FTL_TEMPLATE_KEYTYPE_WRAP                                                    , intent(in) :: key

      Bucket = mod(ftlHash(key), size(self%buckets)) + 1

   end function



end module
#endif
