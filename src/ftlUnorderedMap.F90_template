! Copyright (c) 2016, 2017  Robert RÃ¼ger
!
! This file is part of of the Fortran Template Library.
!
! The Fortran Template Library is free software: you can redistribute it and/or
! modify it under the terms of the GNU Lesser General Public License as
! published by the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! The Fortran Template Library is distributed in the hope that it will be
! useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser
! General Public License for more details.
!
! You should have received a copy of the GNU Lesser General Public License along
! with the Fortran Template Library.  If not, see <http://www.gnu.org/licenses/>.


!   ftlUnorderedMap
!   ===============
!
! Unordered maps are associative containers that store elements formed by the combination of a key value and a mapped
! value, and which allows for fast retrieval of individual elements based on their keys.
!
! In an unordered_map, the key value is generally used to uniquely identify the element, while the mapped value is an
! object with the content associated to this key. Types of key and mapped value may differ.
!
! Internally, the elements in the unordered_map are not sorted in any particular order with respect to either their key or
! mapped values, but organized into buckets depending on their hash values to allow for fast access to individual elements
! directly by their key values (with a constant average time complexity on average).
!
! unordered_map containers are faster than map containers to access individual elements by their key, although they are
! generally less efficient for range iteration through a subset of their elements.
!
! Unordered maps implement the direct access operator (operator[]) which allows for direct access of the mapped value
! using its key value as argument.
!
! Iterators in the container are at least forward iterators.

#define FTL_CONTAINER ftlUnorderedMap
#define FTL_CONTAINER_PROVIDES_FORWARD_ITERATOR

#ifdef FTL_INSTANTIATE_TEMPLATE

#if !defined(FTL_TEMPLATE_TYPE)
#error FTL_TEMPLATE_TYPE must be defined when instantiating ftlUnorderedMap
#endif
#if !defined(FTL_TEMPLATE_TYPE_NAME)
#error FTL_TEMPLATE_TYPE_NAME must be defined when instantiating ftlUnorderedMap
#endif
#if !defined(FTL_TEMPLATE_KEYTYPE)
#error FTL_TEMPLATE_KEYTYPE must be defined when instantiating ftlUnorderedMap
#endif
#if !defined(FTL_TEMPLATE_KEYTYPE_NAME)
#error FTL_TEMPLATE_KEYTYPE_NAME must be defined when instantiating ftlUnorderedMap
#endif

#include "ftlMacros.inc"

#ifdef FTL_TEMPLATE_TYPE_IS_DERIVED
#define FTL_TEMPLATE_TYPE_WRAP type(FTL_TEMPLATE_TYPE)
#else
#define FTL_TEMPLATE_TYPE_WRAP FTL_TEMPLATE_TYPE
#endif
#ifdef FTL_TEMPLATE_KEYTYPE_IS_DERIVED

#define FTL_TEMPLATE_KEYTYPE_WRAP type(FTL_TEMPLATE_KEYTYPE)
#else
#define FTL_TEMPLATE_KEYTYPE_WRAP FTL_TEMPLATE_KEYTYPE
#endif


module CAT4(ftlUnorderedMap,FTL_TEMPLATE_KEYTYPE_NAME,FTL_TEMPLATE_TYPE_NAME,Module)

#ifdef FTL_TEMPLATE_TYPE_MODULE
   use FTL_TEMPLATE_TYPE_MODULE
#endif
#ifdef FTL_TEMPLATE_KEYTYPE_MODULE
   use FTL_TEMPLATE_KEYTYPE_MODULE
#endif

   implicit none
   private

! ====== Type of the ftlUnorderedMap container itself ============================================================================

   type :: BaseEntry
      class(BaseEntry), pointer :: next => null()
   end type

   type, extends(BaseEntry) :: DataEntry
      FTL_TEMPLATE_KEYTYPE_WRAP :: key
      FTL_TEMPLATE_TYPE_WRAP    :: data
   end type


   type, public :: CAT3(ftlUnorderedMap,FTL_TEMPLATE_KEYTYPE_NAME,FTL_TEMPLATE_TYPE_NAME)
      private

      type(BaseEntry), allocatable :: bucket(:)

   contains
      private

      procedure         :: NewDefault
      generic  , public :: New => NewDefault

      procedure, public :: Delete
#ifndef FTL_NO_FINALIZERS
      final             :: Finalizer
#endif

   end type


contains



! ====== Implementation of ftlUnorderedMap methods ===============================================================================


   ! Constructs an unordered_map container object, initializing its contents depending on the constructor version used:
   !
   subroutine NewDefault(self, n)
      class(CAT3(ftlUnorderedMap,FTL_TEMPLATE_KEYTYPE_NAME,FTL_TEMPLATE_TYPE_NAME)), intent(inout) :: self
      integer                                                                      , intent(in)    :: n



   end subroutine


   ! Destructs the container object. This calls each of the contained element's destructors, and dealocates all the
   ! storage capacity allocated by the unordered_map container.
   !
   subroutine Delete(self)
      class(CAT3(ftlUnorderedMap,FTL_TEMPLATE_KEYTYPE_NAME,FTL_TEMPLATE_TYPE_NAME)), intent(inout) :: self

      ! TODO

   end subroutine

#ifndef FTL_NO_FINALIZERS
   subroutine Finalizer(self)
      type(CAT3(ftlUnorderedMap,FTL_TEMPLATE_KEYTYPE_NAME,FTL_TEMPLATE_TYPE_NAME)), intent(inout) :: self
      call self%Delete()
   end subroutine
#endif


end module
#endif
